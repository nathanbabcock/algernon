/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'

import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import { useFrame, useThree } from 'react-three-fiber'

type GLTFResult = GLTF & {
  nodes: {
    cheese: THREE.Mesh
  }
  materials: {
    cheese: THREE.MeshStandardMaterial
  }
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('models/cheese.glb') as GLTFResult
  const { clock } = useThree()

  useFrame((_, delta) => {
    if (!group.current) return

    const rot = group.current.rotation
    rot.set(rot.x, rot.y, rot.z + delta)

    const bounce = 0.5 + Math.sin(clock.elapsedTime * 3) * 0.15
    group.current!.position.setZ(bounce)
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <spotLight position={[0, 0, 2]} castShadow target={group.current} angle={Math.PI/4} />
      <mesh material={materials.cheese} geometry={nodes.cheese.geometry} scale={[0.84, 1.14, 0.47]} castShadow receiveShadow/>
    </group>
  )
}

useGLTF.preload('models/cheese.glb')
